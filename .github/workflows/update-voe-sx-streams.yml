import requests
import base64

def fetch_html_content(id):
    url = f"https://voe.sx/{id}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        raise Exception(f"Failed to fetch HTML content. Status code: {response.status_code}")

def fetch_redirected_url(html_content):
    # Extract the new URL from the script tag in the HTML content
    start_index = html_content.find("window.location.href = '") + len("window.location.href = '")
    end_index = html_content.find("'", start_index)
    new_url = html_content[start_index:end_index]
    return new_url

def fetch_hls_url_from_redirected_url(redirected_url):
    response = requests.get(redirected_url)
    if response.status_code == 200:
        return response.text
    elif response.status_code == 403:
        raise Exception(f"Forbidden to fetch HLS URL from redirected URL. Status code: {response.status_code}")
    else:
        raise Exception(f"Failed to fetch HLS URL from redirected URL. Status code: {response.status_code}")

def decode_base64(base64_encoded_string):
    # Ensure the base64_encoded_string length is a multiple of 4
    padding_needed = len(base64_encoded_string) % 4
    if padding_needed > 0:
        base64_encoded_string += '=' * (4 - padding_needed)  # Add padding if necessary
    decoded_bytes = base64.b64decode(base64_encoded_string)
    return decoded_bytes.decode('utf-8')

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: python FetchAndDecodeHLS.py <id>")
        sys.exit(1)

    id = sys.argv[1]

    try:
        html_content = fetch_html_content(id)
        redirected_url = fetch_redirected_url(html_content)
        hls_url = fetch_hls_url_from_redirected_url(redirected_url)

        # Check if hls_url is base64 encoded
        if hls_url.startswith("data:"):
            hls_url = hls_url.split(",")[1]  # Extract base64 encoded part

        decoded_hls_url = decode_base64(hls_url)
        
        # Print the decoded HLS URL for testing purposes
        print(f"Decoded HLS URL for {id}: {decoded_hls_url}")

    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
